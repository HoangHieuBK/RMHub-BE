version: '3'
services:
  # ========================================================================================================================================
  # kafka and zookeeper

  zookeeper:
    image: "wurstmeister/zookeeper"
    container_name: "rmhub-zookeeper"
    restart: always
    ports:
      - "2181:2181" # should expose for UAT phase
    networks:
      - rmhub

  kafka:
    image: "wurstmeister/kafka"
    container_name: "rmhub-kafka"
    restart: always
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: "INSIDE://:9092, OUTSIDE://:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "INSIDE://kafka:9092, OUTSIDE://${HOST_IP:-localhost}:9093" # env var set from sh script
      KAFKA_INTER_BROKER_LISTENER_NAME: "INSIDE"
      KAFKA_BROKER_ID: 1
      # HOSTNAME_COMMAND: "a magic command"
      # KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://_{HOSTNAME_COMMAND}:9092"
    volumes:
      - /rmhub/kafka:/kafka
    ports:
      - "9092:9092"
      - "9093:9093" # should expose for QA phase
    depends_on:
      - zookeeper
    networks:
      - rmhub

  # ========================================================================================================================================
  # postgres DB

  db-device-mgmt-module:
    container_name: pg-device-mgmt-module
    image: postgres:10.9
    restart: always
    ports:
      - "5401:5432"
    environment:
      POSTGRES_DB: "device"
      POSTGRES_USER: "rmhub"
      POSTGRES_PASSWORD: "123456"
    volumes:
      - /rmhub/pgdata-device-mgmt-module:/var/lib/postgresql/data
    networks:
      - rmhub

  db-traffic-logger-module:
    container_name: pg-traffic-logger-module
    image: postgres:10.9
    restart: always
    ports:
      - "5402:5432"
    environment:
      POSTGRES_DB: "traffic"
      POSTGRES_USER: "rmhub"
      POSTGRES_PASSWORD: "123456"
    volumes:
      - /rmhub/pgdata-traffic-logger-module:/var/lib/postgresql/data
    networks:
      - rmhub

  db-weather-station-module:
    container_name: pg-weather-station-module
    image: postgres:10.9
    restart: always
    ports:
      - "5403:5432"
    environment:
      POSTGRES_DB: "weather"
      POSTGRES_USER: "rmhub"
      POSTGRES_PASSWORD: "123456"
    volumes:
      - /rmhub/pgdata-weather-station-module:/var/lib/postgresql/data
    networks:
      - rmhub

  # ========================================================================================================================================
  # backend modules

  device-mgmt-module:
    build:
      context: ./device-mgmt-module
      dockerfile: Dockerfile
    image: device-mgmt-module
    container_name: "rmhub-device-mgmt-module"
    restart: always
    ports:
      - "8066:8066"
      - "8166:8166"
    environment:
      RMHUB_TIME_ZONE: "Asia/Ho_Chi_Minh"
    volumes:
      - /rmhub/device-mgmt-module:/tmp
    depends_on:
      - kafka
      - db-device-mgmt-module
      - mivisu-connector-ssilm
      - mivisu-connector-api
    networks:
      - rmhub

  traffic-logger-module:
    build:
      context: ./traffic-logger-module
      dockerfile: Dockerfile
    image: traffic-logger-module
    container_name: "rmhub-traffic-logger-module"
    restart: always
    ports:
      - "8065:8065"
      - "8165:8165"
    environment:
      RMHUB_TIME_ZONE: "Asia/Ho_Chi_Minh"
    volumes:
      - /rmhub/traffic-logger-module:/tmp
    depends_on:
      - kafka
      - db-traffic-logger-module
      - mivisu-connector-ssilm
      - mivisu-connector-api
    networks:
      - rmhub

  weather-station-module:
    build:
      context: ./weather-station-module
      dockerfile: Dockerfile
    image: weather-station-module
    container_name: "rmhub-weather-station-module"
    restart: always
    ports:
      - "8064:8064"
      - "8164:8164"
    environment:
      RMHUB_TIME_ZONE: "Asia/Ho_Chi_Minh"
    volumes:
      - /rmhub/weather-station-module:/tmp
    depends_on:
      - kafka
      - db-weather-station-module
      - mivisu-connector-ssilm
      - mivisu-connector-api
    networks:
      - rmhub

  notification-module:
    build:
      context: ./notification-module
      dockerfile: Dockerfile
    image: notification-module
    container_name: "rmhub-notification-module"
    restart: always
    ports:
      - "8067:8067"
      - "8167:8167"
    environment:
      RMHUB_TIME_ZONE: "Asia/Ho_Chi_Minh"
    volumes:
      - /rmhub/notification-module:/tmp
    depends_on:
      - kafka
    networks:
      - rmhub

  # ========================================================================================================================================
  # connector modules

  mivisu-connector-ssilm:
    build:
      context: ./mivisu-connector-ssilm
      dockerfile: Dockerfile
    image: mivisu-connector-ssilm
    container_name: "rmhub-mivisu-connector-ssilm"
    restart: always
    ports:
      - "8062:8062"
      - "8162:8162"
    volumes:
      - /rmhub/mivisu-connector-ssilm:/tmp
    environment:
      RMHUB_TIME_ZONE: "Asia/Ho_Chi_Minh"
#      MIVISU_SOCKET_IP: "c10.labocom.fr"
      MIVISU_SOCKET_PORT: "7521"
      MIVISU_SOCKET_IP: "192.168.10.190"
#      MIVISU_REQUEST_COLLECTION: "<MIVISU><info_txt>Externe 2 Mesure.Demande identification</info_txt><CORPS><abo>LABOCOM</abo><pwd>labocom</pwd></CORPS><ENT><type>w</type><version>2</version><lgmes>0</lgmes><id>A123</id></ENT></MIVISU>"
#      REQUEST_TECHNICAL_DATA: "<MIVISU><info_txt>Externe 2 Mesure.Demande identification</info_txt><CORPS><abo>LABOCOM</abo><pwd>labocom</pwd></CORPS><ENT><type>w</type><version>2</version><lgmes>0</lgmes><id>A123</id></ENT></MIVISU>::<MIVISU><CORPS></CORPS><ENT><type>y</type><version>1</version><lgmes>0</lgmes><id>ZYX</id></ENT></MIVISU>"
    depends_on:
      - kafka
    networks:
      - rmhub

  mivisu-connector-api:
    build:
      context: ./mivisu-connector-api
      dockerfile: Dockerfile
    image: mivisu-connector-api
    container_name: "rmhub-mivisu-connector-api"
    restart: always
    ports:
      - "8068:8068"
      - "8168:8168"
    volumes:
      - /rmhub/mivisu-connector-api:/tmp
    environment:
      RMHUB_TIME_ZONE: "Asia/Ho_Chi_Minh"
#      RMHUB_MIVISU_API_URL: "http://c10.labocom.fr/info_get_igx"
      RMHUB_MIVISU_API_URL: "http://192.168.10.190:7528/info_get_igx"
    depends_on:
      - kafka
    networks:
      - rmhub

  # ========================================================================================================================================
  # monitoring modules

  prometheus:
    image: "prom/prometheus"
    container_name: "prometheus"
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - rmhub

  grafana:
    image: "grafana/grafana"
    container_name: "grafana"
    restart: always
    ports:
      - "3000:3000"
    networks:
      - rmhub

networks:
  rmhub:
